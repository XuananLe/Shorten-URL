user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 2048; 
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    access_log /var/log/nginx/access.log combined;
    error_log /var/log/nginx/error.log warn;

    upstream url_shortener_backend {
        least_conn;  

        zone backend_zone 64k;

        # TODO: No more hardcode, golang = SERVER_NAME in env
        server golang:3002 max_fails=3 fail_timeout=30s;
        server golang:3003 max_fails=3 fail_timeout=30s;
        server golang:3004 max_fails=3 fail_timeout=30s;
        server golang:3005 max_fails=3 fail_timeout=30s;
        server golang:3006 max_fails=3 fail_timeout=30s;
        server golang:3007 max_fails=3 fail_timeout=30s;
        server golang:3008 max_fails=3 fail_timeout=30s;
        server golang:3009 max_fails=3 fail_timeout=30s;
        server golang:3010 max_fails=3 fail_timeout=30s;
        server golang:3011 max_fails=3 fail_timeout=30s;
        server golang:3012 max_fails=3 fail_timeout=30s;

        keepalive 32;  # Keep connections alive
    }

    # Add these directives in your http or server block for better performance
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;
    proxy_max_temp_file_size 0;

    # API Gateway Server
    server {
        listen 3001;
        server_name golang;

        # JSON responses
        default_type application/json;

        # Proxy headers
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        location / {
            proxy_pass http://url_shortener_backend;
            
            # Timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Error handling
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 5s;

            # Todo: Config proxy cache
            # proxy_cache url_shortener_cache;
            # proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
            # proxy_cache_valid 200 1h;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"UP"}';
        }
    }
}
